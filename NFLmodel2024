import pandas as pd
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression

class DatasetSingleton:
    _instance = None

    def __new__(cls, file_path):
        if not cls._instance:
            cls._instance = super(DatasetSingleton, cls).__new__(cls)
            cls._instance._data = pd.read_csv(file_path)
        return cls._instance

    def get_data(self):
        return self._data

class RegressionContext:
    def __init__(self, regression_strategy):
        self.regression_strategy = regression_strategy

    def set_regression_strategy(self, regression_strategy):
        self.regression_strategy = regression_strategy

    def apply_regression(self, x_train, y_train, x_test):
        return self.regression_strategy.predict(x_train, y_train, x_test)

class LinearRegressionStrategy:
    def __init__(self):
        self.lr = LinearRegression()

    def predict(self, x_train, y_train, x_test):
        self.lr.fit(x_train, y_train)
        return self.lr.predict(x_test)

def main():
    file_path = "/kaggle/input/nfl-big-data-bowl-2024/games.csv"
    dataset = DatasetSingleton(file_path).get_data()

    # Exibir informações sobre o dataset
    print("Dataset Information:")
    print(dataset.info())

    # Exibir estatísticas descritivas
    print("\nDataset Description:")
    print(dataset.describe())

    # Aplicar estratégia de regressão linear
    x = dataset[["homeFinalScore"]]
    y = dataset[["visitorFinalScore"]]
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5)

    linear_regression_strategy = LinearRegressionStrategy()
    regression_context = RegressionContext(linear_regression_strategy)
    y_pred = regression_context.apply_regression(x_train, y_train, x_test)

    # Exibir as primeiras 10 previsões
    print("\nTop 10 Predictions:")
    print(y_pred[:10])

    # Calcular o erro do modelo
    mse = mean_squared_error(y_train, y_pred)
    print(f"\nModel Accuracy (Mean Squared Error): {mse}")

    # Visualizações usando Plotly Express
    fig = px.histogram(dataset, "season")
    fig.show()

    fig = px.histogram(dataset, "homeTeamAbbr")
    fig.show()

    fig = px.histogram(dataset, "visitorTeamAbbr")
    fig.show()

    fig = px.histogram(dataset, "homeFinalScore")
    fig.show()

    fig = px.histogram(dataset, "visitorFinalScore")
    fig.show()

    fig = px.pie(dataset, "homeTeamAbbr")
    fig.show()

    fig = px.pie(dataset, "visitorTeamAbbr")
    fig.show()

    fig = px.line(dataset, "homeFinalScore")
    fig.show()

    fig = px.line(dataset, "visitorFinalScore")
    fig.show()

    fig = px.bar(dataset, "season")
    fig.show()

    fig = px.bar(dataset, "week")
    fig.show()

    fig = px.violin(dataset, "homeTeamAbbr")
    fig.show()

    fig = px.area(dataset, "visitorTeamAbbr")
    fig.show()

    fig = px.scatter(dataset, "homeFinalScore")
    fig.show()

    fig = px.scatter(dataset, "visitorFinalScore")
    fig.show()

if __name__ == "__main__":
    main()
